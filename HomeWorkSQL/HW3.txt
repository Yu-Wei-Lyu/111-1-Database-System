CREATE DATABASE DBHW3;
SHOW DATABASES;
USE DBHW3;

drop table if EXISTS STUDENT, COURSE, SECTION, GRADE_REPORT, PREREQUISITE;

CREATE TABLE STUDENT (
	StudentNumber VARCHAR(63), 
    `Name` VARCHAR(63), 
    Class INT, 
    Major VARCHAR(63),
    
    PRIMARY KEY(StudentNumber)
);
DESCRIBE STUDENT;

CREATE TABLE COURSE (
	CourseNumber VARCHAR(63), 
    CourseName VARCHAR(63), 
    CreditHour INT, 
    Department VARCHAR(63),
    
    PRIMARY KEY(CourseNumber)
);
DESCRIBE COURSE;

CREATE TABLE SECTION (
	SectionNumber VARCHAR(63), 
    CourseNumber VARCHAR(63), 
    Semester VARCHAR(63), 
    `Year` YEAR, 
    Instructor VARCHAR(63),
    
    PRIMARY KEY(SectionNumber),
    FOREIGN KEY(CourseNumber) REFERENCES COURSE(CourseNumber) ON DELETE SET NULL
);
DESCRIBE SECTION;

CREATE TABLE GRADE_REPORT (
	StudentNumber VARCHAR(63), 
    SectionNumber VARCHAR(63), 
    Grade INT,
    
    PRIMARY KEY(StudentNumber, SectionNumber),
    FOREIGN KEY(StudentNumber) REFERENCES STUDENT(StudentNumber) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY(SectionNumber) REFERENCES SECTION(SectionNumber) ON DELETE CASCADE ON UPDATE CASCADE
);
DESCRIBE GRADE_REPORT;

CREATE TABLE PREREQUISITE (
	CourseNumber VARCHAR(63), 
	PrerequisiteCourseNumber VARCHAR(63),
    
    PRIMARY KEY(CourseNumber, PrerequisiteCourseNumber),
    FOREIGN KEY(CourseNumber) REFERENCES COURSE(CourseNumber) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY(PrerequisiteCourseNumber) REFERENCES COURSE(CourseNumber) ON DELETE CASCADE ON UPDATE CASCADE
);
DESCRIBE PREREQUISITE;

INSERT INTO STUDENT
VALUES 
	('001', 'Edward', 1, 'EECS'),
	('002', 'Breach', 2, 'CSIE'),
    ('003', 'Brimstone', 3, 'EECS'),
	('004', 'Chamber', 1, 'CSIE'),
    ('005', 'Cypher', 2, 'CSIE'),
    ('006', 'Fade', 3, 'EECS');
SELECT * FROM STUDENT;

INSERT INTO COURSE
VALUES 
	('1', 'Database Systems', 4, 'EECS'),
	('2', 'Web Programming', 2, 'EECS'),
	('3', 'Computer Programming', 1, 'CSIE'),
    ('4', 'Windows Programming', 2, 'CSIE');
SELECT * FROM COURSE;

INSERT INTO SECTION
VALUES
	('1', '1', 'Fall', 2020, 'Liu'),
    ('2', '4', 'Spring', 2021, 'Chen'),
    ('3', '2', 'Spring', 2022, 'Liu'),
    ('4', '3', 'Fall', 2022, 'Chen');
SELECT * FROM SECTION;

INSERT INTO GRADE_REPORT
VALUES
	('001', '1', 90),
    ('001', '2', 70),
    ('001', '3', 80),
    ('001', '4', 100),
	('002', '1', 60),
    ('002', '2', 60),
    ('002', '3', 50),
    ('002', '4', 70),
	('003', '1', 70),
    ('003', '2', 50),
    ('003', '3', 30),
    ('003', '4', 40),
	('004', '1', 90),
    ('004', '2', 90),
    ('004', '3', 90),
    ('004', '4', 100),
	('005', '1', 60),
    ('005', '2', 45),
    ('005', '4', 60),
	('006', '1', 10),
    ('006', '2', 40),
    ('006', '3', 45),
    ('006', '4', 30);
SELECT * FROM GRADE_REPORT;

INSERT INTO PREREQUISITE
VALUES
	('2', '3'),
    ('2', '4'),
    ('1', '3');
SELECT * FROM PREREQUISITE;

show tables;

/*1(a) BEGIN*/
SELECT *
FROM COURSE
WHERE CourseName = 'Database Systems' 
	AND Department = 'EECS';
    
UPDATE COURSE
SET CreditHour = 3 
WHERE CourseName = 'Database Systems' 
	AND Department = 'EECS';
    
SELECT *
FROM COURSE
WHERE CourseName = 'Database Systems' 
	AND Department = 'EECS';
/*1(a) END*/
/*1(b) BEGIN*/
SELECT * from STUDENT;

DELETE FROM STUDENT
WHERE `Name` = 'Edward' 
	AND StudentNumber = '001';

SELECT * from STUDENT;
/*1(b) END*/
/*1(c) BEGIN*/

SELECT COUR.CourseName, `Year`, Instructor
FROM COURSE AS COUR
INNER JOIN SECTION AS SEC USING(CourseNumber);

SELECT CourseName
FROM COURSE
WHERE CourseNumber IN (
	SELECT CourseNumber
	FROM SECTION
	WHERE Instructor = 'Liu' 
		AND `Year` IN (2020, 2022)
);

/*1(c) END*/
/*1(d) BEGIN*/

SELECT StudentNumber, CourseNumber, Semester, `Year`, Instructor
FROM SECTION AS SEC
INNER JOIN GRADE_REPORT AS GR USING(SectionNumber)
WHERE Instructor = 'Liu' 
ORDER BY Instructor ASC;

SELECT CourseNumber, Semester, `Year`, COUNT(*) AS Students
FROM SECTION AS SEC
INNER JOIN GRADE_REPORT AS GR USING(SectionNumber)
WHERE Instructor = 'Liu' 
GROUP BY CourseNumber, Semester, `Year`;

/*1(d) END*/
/*1(e) BEGIN*/

SELECT COURSE.CourseNumber, COURSE.CourseName, PREREQUISITE.PrerequisiteCourseNumber, PRECOURSE.CourseName AS PrerequisiteCourseName
FROM COURSE
INNER JOIN PREREQUISITE USING(CourseNumber)
INNER JOIN COURSE AS PRECOURSE
	ON PREREQUISITE.PrerequisiteCourseNumber = PRECOURSE.CourseNumber;
    
SELECT PREREQUISITE.PrerequisiteCourseNumber, PRECOURSE.CourseName AS PrerequisiteCourseName
FROM COURSE
INNER JOIN PREREQUISITE USING(CourseNumber)
INNER JOIN COURSE AS PRECOURSE
	ON PREREQUISITE.PrerequisiteCourseNumber = PRECOURSE.CourseNumber
WHERE COURSE.CourseName = 'Web Programming' 
	AND	COURSE.Department = 'EECS';

/*1(e) END*/
/*1(f) BEGIN*/

SELECT `Name`, COURSE.CourseNumber, CourseName, CreditHour, Semester, `Year`, Grade
FROM STUDENT
INNER JOIN GRADE_REPORT USING(StudentNumber)
INNER JOIN SECTION USING(SectionNumber)
INNER JOIN COURSE USING(CourseNumber)
WHERE Class = 3;
    
/*1(f) END*/
/*1(g) BEGIN*/

SELECT `Name`, SectionNumber, Grade
FROM STUDENT
INNER JOIN GRADE_REPORT AS GR USING(StudentNumber);

SELECT `Name`
FROM STUDENT
WHERE StudentNumber IN (
	SELECT StudentNumber
    FROM GRADE_REPORT
    WHERE
		Grade >= 80
);

/*1(g) END*/
/*1(h) BEGIN*/

SELECT `Name`, SectionNumber, Grade
FROM STUDENT
INNER JOIN GRADE_REPORT AS GR USING(StudentNumber);
    
SELECT `Name`, Major
FROM STUDENT AS ST
WHERE NOT EXISTS (
	SELECT StudentNumber
    FROM GRADE_REPORT AS GR
    WHERE ST.StudentNumber = GR.StudentNumber 
        AND Grade < 60
);

/*1(h) END*/
/*1(i) BEGIN*/

SELECT ST.StudentNumber, `Name`, SectionNumber, Grade
FROM STUDENT AS ST
INNER JOIN GRADE_REPORT AS GR USING(StudentNumber);

SELECT `Name`, Major
FROM STUDENT AS ST
WHERE EXISTS (
	SELECT StudentNumber
    FROM GRADE_REPORT AS GR
    WHERE ST.StudentNumber = GR.StudentNumber 
        AND Grade < 60
)
ORDER BY ST.StudentNumber ASC;

/*1(i) END*/
/*1(j) BEGIN*/

SELECT `Name`, SEC.SectionNumber, AVG(Grade), `Year`
FROM STUDENT AS ST
INNER JOIN GRADE_REPORT AS GR USING(StudentNumber)
INNER JOIN SECTION AS SEC USING(SectionNumber)
WHERE `Year` = 2022
GROUP BY ST.StudentNumber
ORDER BY `Name` ASC;

SELECT `Name`, AVG(Grade) as AverageGrade 
FROM GRADE_REPORT AS GR
INNER JOIN STUDENT AS ST USING(StudentNumber)
INNER JOIN SECTION AS SEC USING(SectionNumber)
WHERE `Year` = 2022
GROUP BY ST.StudentNumber HAVING AverageGrade > 80;

/*1(j) END*/
/*1(k) BEGIN*/

SELECT ST.StudentNumber, Major, AVG(Grade)
FROM STUDENT AS ST
INNER JOIN GRADE_REPORT AS GR USING(StudentNumber)
GROUP BY StudentNumber;

SELECT Major, COUNT(*)
FROM (
	SELECT Major, AVG(Grade) AS AverageGrade
	FROM GRADE_REPORT AS GR
	INNER JOIN STUDENT AS ST USING(StudentNumber)
	GROUP BY Major, ST.StudentNumber HAVING AverageGrade < 60
) AVGTABLE
GROUP BY Major;

/*1(k) END*/
/*1(l) BEGIN*/
DROP VIEW STUDENT_INFO_VIEW;
CREATE VIEW STUDENT_INFO_VIEW
AS 
	SELECT StudentNumber, `Name`, CourseName, Semester, `Year`, Grade
	FROM STUDENT
	INNER JOIN GRADE_REPORT USING(StudentNumber)
	INNER JOIN SECTION USING(SectionNumber)
	INNER JOIN COURSE USING(CourseNumber);

SELECT * FROM STUDENT_INFO_VIEW;
/*1(l) END*/

/*2(d) BEGIN*/
DROP PROCEDURE IF EXISTS StudentPassOrNot;

DELIMITER $$
CREATE PROCEDURE StudentPassOrNot(IN `StudentNumber` VARCHAR(63))
BEGIN
    SELECT AVG(Grade),
    CASE
        WHEN AVG(Grade) >= 60 THEN "PASS"
        WHEN AVG(Grade) < 60 THEN "FAIL"
    END AS PassOrFail
    FROM STUDENT ST
    INNER JOIN GRADE_REPORT G USING(StudentNumber)
    WHERE `StudentNumber` = ST.StudentNumber;
END$$
DELIMITER ;

CALL StudentPassOrNot('002');
CALL StudentPassOrNot('003');
CALL StudentPassOrNot('004');
CALL StudentPassOrNot('005');
CALL StudentPassOrNot('006');

/*2(d) END*/

DESCRIBE STUDENT;
DESCRIBE COURSE;
DESCRIBE SECTION;
DESCRIBE GRADE_REPORT;
DESCRIBE PREREQUISITE;

UPDATE `STUDENT`
set `StudentNumber` = 001
WHERE `StudentNumber` = 109590001;
SHOW TABLES;
SELECT * from STUDENT;
SELECT * from COURSE;
SELECT * from SECTION;
SELECT * from GRADE_REPORT;
SELECT * from PREREQUISITE;